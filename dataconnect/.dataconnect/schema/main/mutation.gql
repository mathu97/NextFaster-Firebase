extend type Mutation {
  """
  ✨ Insert a single `Category` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  category_insert(
    """
    Data object to insert into the table.
    """
    data: Category_Data!
  ): Category_KeyOutput! @fdc_generated(from: "Category", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Collection` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  collection_insert(
    """
    Data object to insert into the table.
    """
    data: Collection_Data!
  ): Collection_KeyOutput! @fdc_generated(from: "Collection", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Product` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  product_insert(
    """
    Data object to insert into the table.
    """
    data: Product_Data!
  ): Product_KeyOutput! @fdc_generated(from: "Product", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Subcategory` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  subcategory_insert(
    """
    Data object to insert into the table.
    """
    data: Subcategory_Data!
  ): Subcategory_KeyOutput! @fdc_generated(from: "Subcategory", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Subcollection` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  subcollection_insert(
    """
    Data object to insert into the table.
    """
    data: Subcollection_Data!
  ): Subcollection_KeyOutput! @fdc_generated(from: "Subcollection", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Category` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  category_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Category_Data!]!
  ): [Category_KeyOutput!]! @fdc_generated(from: "Category", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Collection` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  collection_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Collection_Data!]!
  ): [Collection_KeyOutput!]! @fdc_generated(from: "Collection", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Product` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  product_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Product_Data!]!
  ): [Product_KeyOutput!]! @fdc_generated(from: "Product", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Subcategory` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  subcategory_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Subcategory_Data!]!
  ): [Subcategory_KeyOutput!]! @fdc_generated(from: "Subcategory", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Subcollection` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  subcollection_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Subcollection_Data!]!
  ): [Subcollection_KeyOutput!]! @fdc_generated(from: "Subcollection", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Category` into the table, based on the primary key. Returns the key of the newly inserted `Category`.
  """
  category_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Category_Data!
  ): Category_KeyOutput! @fdc_generated(from: "Category", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Collection` into the table, based on the primary key. Returns the key of the newly inserted `Collection`.
  """
  collection_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Collection_Data!
  ): Collection_KeyOutput! @fdc_generated(from: "Collection", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Product` into the table, based on the primary key. Returns the key of the newly inserted `Product`.
  """
  product_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Product_Data!
  ): Product_KeyOutput! @fdc_generated(from: "Product", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Subcategory` into the table, based on the primary key. Returns the key of the newly inserted `Subcategory`.
  """
  subcategory_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Subcategory_Data!
  ): Subcategory_KeyOutput! @fdc_generated(from: "Subcategory", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Subcollection` into the table, based on the primary key. Returns the key of the newly inserted `Subcollection`.
  """
  subcollection_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Subcollection_Data!
  ): Subcollection_KeyOutput! @fdc_generated(from: "Subcollection", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Category` objects into the table, based on the primary key. Returns the key of the newly inserted `Category`.
  """
  category_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Category_Data!]!
  ): [Category_KeyOutput!]! @fdc_generated(from: "Category", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Collection` objects into the table, based on the primary key. Returns the key of the newly inserted `Collection`.
  """
  collection_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Collection_Data!]!
  ): [Collection_KeyOutput!]! @fdc_generated(from: "Collection", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Product` objects into the table, based on the primary key. Returns the key of the newly inserted `Product`.
  """
  product_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Product_Data!]!
  ): [Product_KeyOutput!]! @fdc_generated(from: "Product", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Subcategory` objects into the table, based on the primary key. Returns the key of the newly inserted `Subcategory`.
  """
  subcategory_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Subcategory_Data!]!
  ): [Subcategory_KeyOutput!]! @fdc_generated(from: "Subcategory", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Subcollection` objects into the table, based on the primary key. Returns the key of the newly inserted `Subcollection`.
  """
  subcollection_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Subcollection_Data!]!
  ): [Subcollection_KeyOutput!]! @fdc_generated(from: "Subcollection", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Category` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  category_update(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: Category_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Category_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Category_Data!
  ): Category_KeyOutput @fdc_generated(from: "Category", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Collection` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  collection_update(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: Collection_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Collection_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Collection_Data!
  ): Collection_KeyOutput @fdc_generated(from: "Collection", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Product` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  product_update(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: Product_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Product_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Product_Data!
  ): Product_KeyOutput @fdc_generated(from: "Product", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Subcategory` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  subcategory_update(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: Subcategory_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Subcategory_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Subcategory_Data!
  ): Subcategory_KeyOutput @fdc_generated(from: "Subcategory", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Subcollection` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  subcollection_update(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: Subcollection_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Subcollection_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Subcollection_Data!
  ): Subcollection_KeyOutput @fdc_generated(from: "Subcollection", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Category` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  category_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Category_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Category_Data!
  ): Int! @fdc_generated(from: "Category", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Collection` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  collection_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Collection_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Collection_Data!
  ): Int! @fdc_generated(from: "Collection", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Product` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  product_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Product_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Product_Data!
  ): Int! @fdc_generated(from: "Product", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Subcategory` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  subcategory_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Subcategory_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Subcategory_Data!
  ): Int! @fdc_generated(from: "Subcategory", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Subcollection` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  subcollection_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Subcollection_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Subcollection_Data!
  ): Int! @fdc_generated(from: "Subcollection", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Category` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  category_delete(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: Category_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Category_FirstRow
  ): Category_KeyOutput @fdc_generated(from: "Category", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Collection` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  collection_delete(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: Collection_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Collection_FirstRow
  ): Collection_KeyOutput @fdc_generated(from: "Collection", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Product` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  product_delete(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: Product_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Product_FirstRow
  ): Product_KeyOutput @fdc_generated(from: "Product", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Subcategory` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  subcategory_delete(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: Subcategory_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Subcategory_FirstRow
  ): Subcategory_KeyOutput @fdc_generated(from: "Subcategory", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Subcollection` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  subcollection_delete(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: Subcollection_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Subcollection_FirstRow
  ): Subcollection_KeyOutput @fdc_generated(from: "Subcollection", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Category` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  category_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Category_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Category", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Collection` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  collection_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Collection_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Collection", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Product` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  product_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Product_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Product", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Subcategory` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  subcategory_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Subcategory_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Subcategory", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Subcollection` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  subcollection_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Subcollection_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Subcollection", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
